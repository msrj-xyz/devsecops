# Output Values for DevSecOps Infrastructure

# VPC Outputs
output "vpc_id" {
  description = "VPC ID"
  value       = module.vpc.vpc_id
}

output "vpc_cidr_block" {
  description = "VPC CIDR block"
  value       = module.vpc.vpc_cidr_block
}

output "private_subnets" {
  description = "List of private subnet IDs"
  value       = module.vpc.private_subnets
}

output "public_subnets" {
  description = "List of public subnet IDs"
  value       = module.vpc.public_subnets
}

output "intra_subnets" {
  description = "List of intra subnet IDs"
  value       = module.vpc.intra_subnets
}

# EKS Cluster Outputs
output "cluster_id" {
  description = "EKS cluster ID"
  value       = module.eks.cluster_id
}

output "cluster_arn" {
  description = "EKS cluster ARN"
  value       = module.eks.cluster_arn
}

output "cluster_name" {
  description = "EKS cluster name"
  value       = module.eks.cluster_name
}

output "cluster_endpoint" {
  description = "EKS cluster endpoint"
  value       = module.eks.cluster_endpoint
  sensitive   = true
}

output "cluster_version" {
  description = "EKS cluster version"
  value       = module.eks.cluster_version
}

output "cluster_platform_version" {
  description = "EKS cluster platform version"
  value       = module.eks.cluster_platform_version
}

output "cluster_status" {
  description = "EKS cluster status"
  value       = module.eks.cluster_status
}

# Security Outputs
output "cluster_security_group_id" {
  description = "Cluster security group ID"
  value       = module.eks.cluster_security_group_id
}

output "node_security_group_id" {
  description = "Node security group ID"
  value       = module.eks.node_security_group_id
}

output "cluster_certificate_authority_data" {
  description = "Base64 encoded certificate data required to communicate with the cluster"
  value       = module.eks.cluster_certificate_authority_data
  sensitive   = true
}

output "cluster_oidc_issuer_url" {
  description = "The URL on the EKS cluster for the OpenID Connect identity provider"
  value       = module.eks.cluster_oidc_issuer_url
}

output "oidc_provider_arn" {
  description = "The ARN of the OIDC Provider"
  value       = module.eks.oidc_provider_arn
}

# KMS Outputs
output "kms_key_arn" {
  description = "The Amazon Resource Name (ARN) of the EKS KMS key"
  value       = aws_kms_key.eks.arn
}

output "kms_key_id" {
  description = "The globally unique identifier for the EKS KMS key"
  value       = aws_kms_key.eks.key_id
}

# Node Group Outputs
output "eks_managed_node_groups" {
  description = "Map of attribute maps for all EKS managed node groups created"
  value       = module.eks.eks_managed_node_groups
}

output "eks_managed_node_groups_autoscaling_group_names" {
  description = "List of the autoscaling group names created by EKS managed node groups"
  value       = module.eks.eks_managed_node_groups_autoscaling_group_names
}

# Fargate Outputs
output "fargate_profiles" {
  description = "Map of attribute maps for all EKS Fargate profiles created"
  value       = module.eks.fargate_profiles
}

# IAM Role Outputs
output "cluster_iam_role_name" {
  description = "IAM role name associated with EKS cluster"
  value       = module.eks.cluster_iam_role_name
}

output "cluster_iam_role_arn" {
  description = "IAM role ARN associated with EKS cluster"
  value       = module.eks.cluster_iam_role_arn
}

output "load_balancer_controller_role_arn" {
  description = "IAM role ARN for AWS Load Balancer Controller"
  value       = module.load_balancer_controller_irsa_role.iam_role_arn
}

output "cluster_autoscaler_role_arn" {
  description = "IAM role ARN for Cluster Autoscaler"
  value       = module.cluster_autoscaler_irsa_role.iam_role_arn
}

# CloudWatch Outputs
output "cloudwatch_log_group_name" {
  description = "Name of cloudwatch log group created"
  value       = module.eks.cloudwatch_log_group_name
}

output "cloudwatch_log_group_arn" {
  description = "Arn of cloudwatch log group created"
  value       = module.eks.cloudwatch_log_group_arn
}

# Kubectl Config
output "kubectl_config" {
  description = "kubectl config as generated by the module"
  value = templatefile("${path.module}/templates/kubeconfig.tpl", {
    cluster_name                      = module.eks.cluster_name
    cluster_endpoint                  = module.eks.cluster_endpoint
    cluster_certificate_authority_data = module.eks.cluster_certificate_authority_data
    aws_region                       = var.aws_region
  })
  sensitive = true
}

# Connection Information
output "cluster_connect_command" {
  description = "AWS CLI command to update kubeconfig"
  value       = "aws eks update-kubeconfig --region ${var.aws_region} --name ${module.eks.cluster_name}"
}

# Environment Information
output "environment_info" {
  description = "Environment information"
  value = {
    project_name = var.project_name
    environment  = var.environment
    aws_region   = var.aws_region
    vpc_cidr     = var.vpc_cidr
    created_at   = timestamp()
  }
}

# Security Configuration Summary
output "security_configuration" {
  description = "Security configuration summary"
  value = {
    cluster_endpoint_public_access   = var.cluster_endpoint_public_access
    cluster_endpoint_private_access  = var.cluster_endpoint_private_access
    cluster_encryption_enabled      = var.enable_cluster_encryption
    irsa_enabled                    = var.enable_irsa
    logging_enabled                 = var.enable_cluster_logging
    log_types                       = var.cluster_log_types
    compliance_framework            = var.compliance_framework
    data_classification             = var.data_classification
  }
}

# Cost Information
output "cost_tags" {
  description = "Cost allocation tags applied to resources"
  value = {
    Project     = var.project_name
    Environment = var.environment
    Owner       = var.owner
    ManagedBy   = "Terraform"
    Compliance  = var.compliance_framework
    DataClass   = var.data_classification
  }
}

# Monitoring Endpoints
output "monitoring_endpoints" {
  description = "Monitoring and observability endpoints"
  value = {
    cluster_endpoint = module.eks.cluster_endpoint
    oidc_issuer_url  = module.eks.cluster_oidc_issuer_url
    log_group        = module.eks.cloudwatch_log_group_name
  }
  sensitive = true
}

# Network Configuration Summary
output "network_configuration" {
  description = "Network configuration summary"
  value = {
    vpc_id              = module.vpc.vpc_id
    vpc_cidr            = module.vpc.vpc_cidr_block
    availability_zones  = data.aws_availability_zones.available.names
    private_subnet_ids  = module.vpc.private_subnets
    public_subnet_ids   = module.vpc.public_subnets
    nat_gateway_ids     = module.vpc.natgw_ids
    internet_gateway_id = module.vpc.igw_id
  }
}

# Application Deployment Information
output "deployment_info" {
  description = "Information needed for application deployment"
  value = {
    cluster_name    = module.eks.cluster_name
    cluster_region  = var.aws_region
    oidc_provider   = module.eks.oidc_provider_arn
    vpc_id          = module.vpc.vpc_id
    private_subnets = module.vpc.private_subnets
    public_subnets  = module.vpc.public_subnets
  }
}

# Helm Configuration
output "helm_config" {
  description = "Helm configuration for applications"
  value = {
    load_balancer_controller = {
      service_account_role_arn = module.load_balancer_controller_irsa_role.iam_role_arn
      cluster_name            = module.eks.cluster_name
    }
    cluster_autoscaler = {
      service_account_role_arn = module.cluster_autoscaler_irsa_role.iam_role_arn
      cluster_name            = module.eks.cluster_name
    }
  }
}

# Compliance Report
output "compliance_report" {
  description = "Compliance configuration report"
  value = {
    encryption_at_rest = {
      eks_secrets = var.enable_cluster_encryption
      ebs_volumes = true
      s3_buckets  = true
    }
    encryption_in_transit = {
      cluster_api      = true
      node_to_node     = true
      load_balancer    = true
    }
    access_controls = {
      rbac_enabled     = true
      irsa_enabled     = var.enable_irsa
      private_endpoint = var.cluster_endpoint_private_access
    }
    monitoring = {
      cloudwatch_logs    = var.enable_cluster_logging
      vpc_flow_logs      = true
      security_groups    = true
    }
    compliance_framework = var.compliance_framework
    audit_logging       = contains(var.cluster_log_types, "audit")
  }
}