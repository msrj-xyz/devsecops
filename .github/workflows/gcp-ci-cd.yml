name: 🚀 Google Cloud CI/CD Pipeline

on:
  push:
    branches: [ master, staging, development ]
  pull_request:
    branches: [ master, staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
  ARTIFACT_REGISTRY_LOCATION: us-central1
  ARTIFACT_REGISTRY_REPOSITORY: devsecops-repo
  GKE_CLUSTER: devsecops-cluster  
  GKE_ZONE: us-central1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ================================================
  # ENVIRONMENT DETERMINATION
  # ================================================
  determine-environment:
    name: 🎯 Determine Target Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env-mapping.outputs.environment }}
      deploy-to-env: ${{ steps.env-mapping.outputs.deploy-to-env }}
    
    steps:
    - name: 🎯 Map Branch to Environment
      id: env-mapping
      run: |
        case "${{ github.ref_name }}" in
          "master")
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "deploy-to-env=true" >> $GITHUB_OUTPUT
            echo "🚀 Branch: master → Environment: production"
            ;;
          "staging")
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "deploy-to-env=true" >> $GITHUB_OUTPUT
            echo "🔄 Branch: staging → Environment: staging"
            ;;
          "development")
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "deploy-to-env=true" >> $GITHUB_OUTPUT
            echo "🧪 Branch: development → Environment: development"
            ;;
          *)
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "deploy-to-env=false" >> $GITHUB_OUTPUT
            echo "🔀 Branch: ${{ github.ref_name }} → Environment: development (no deployment)"
            ;;
        esac
        
        # Override with manual input if workflow_dispatch
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.environment }}" ]]; then
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          echo "deploy-to-env=true" >> $GITHUB_OUTPUT
          echo "👤 Manual override → Environment: ${{ inputs.environment }}"
        fi

  # ================================================
  # STAGE 1: PRE-BUILD VALIDATION
  # ================================================
  pre-build:
    name: 🔍 Pre-build Validation
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.image-tag }}
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏷️ Generate Metadata
      id: meta
      run: |
        echo "image-tag=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build-date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

  # ================================================
  # STAGE 2: SECURITY SCANNING
  # ================================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: 🔍 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript

    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: 📊 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: 🔍 Dependency Scanning
      uses: snyk/actions/setup@master
      
    - name: 🔍 Snyk Test
      run: snyk test --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # ================================================
  # STAGE 3: BUILD AND TEST
  # ================================================
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: [pre-build, security-scan]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🧹 Lint Code
      run: npm run lint

    - name: 🧪 Run Tests
      run: npm run test

    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  # ================================================
  # STAGE 4: DOCKER BUILD & SCAN
  # ================================================
  docker-build:
    name: 🐳 Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [pre-build, build-and-test]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔑 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 🏗️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🐳 Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev

    - name: 🏗️ Build Docker Image
      run: |
        docker build \
          --tag ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/app:${{ needs.pre-build.outputs.image-tag }} \
          --tag ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/app:latest \
          --build-arg BUILD_DATE="${{ needs.pre-build.outputs.build-date }}" \
          --build-arg VCS_REF="${{ github.sha }}" \
          .

    - name: 🔍 Scan Docker Image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/app:${{ needs.pre-build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🚀 Push Docker Image
      run: |
        docker push ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/app:${{ needs.pre-build.outputs.image-tag }}
        docker push ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/app:latest

  # ================================================
  # STAGE 5: ENVIRONMENT-BASED DEPLOYMENT
  # ================================================
  deploy:
    name: 🚀 Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, pre-build, docker-build]
    if: needs.determine-environment.outputs.deploy-to-env == 'true'
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ needs.determine-environment.outputs.environment == 'production' && 'https://devsecops.example.com' || needs.determine-environment.outputs.environment == 'staging' && 'https://staging.devsecops.example.com' || 'https://dev.devsecops.example.com' }}
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔑 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 🏗️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🔧 Get GKE Credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}

    - name: 🚀 Deploy to GKE ${{ needs.determine-environment.outputs.environment }}
      run: |
        # Update image in Kubernetes manifests
        sed -i "s|IMAGE_TAG|${{ needs.pre-build.outputs.image-tag }}|g" k8s/staging/*.yaml
        sed -i "s|PROJECT_ID|${{ env.GCP_PROJECT_ID }}|g" k8s/staging/*.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/staging/
        
        # Wait for deployment
        kubectl rollout status deployment/app-deployment -n ${{ needs.determine-environment.outputs.environment }} --timeout=300s

    - name: 🧪 Run Smoke Tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Get external IP
        EXTERNAL_IP=$(kubectl get service app-service -n staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run health check
        curl -f http://$EXTERNAL_IP/health || exit 1

  # ================================================
  # STAGE 6: POST-DEPLOYMENT MONITORING
  # ================================================
  post-deployment:
    name: 📊 Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: always() && needs.deploy.result != 'cancelled'
    
    steps:
    - name: �️ Create Release Tag
      if: needs.determine-environment.outputs.environment == 'production' && needs.deploy.result == 'success'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        TAG="v$(date +%Y.%m.%d)-${{ github.run_number }}"
        git tag -a $TAG -m "Production release $TAG"
        git push origin $TAG
    
    - name: 🔔 Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.deploy.result == 'success' && 'success' || 'failure' }}
        text: |
          🚀 Deployment to Google Cloud completed!
          
          **Status:** ${{ needs.deploy.result == 'success' && '✅ Success' || '❌ Failed' }}
          **Environment:** ${{ needs.determine-environment.outputs.environment }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Actor:** ${{ github.actor }}
          **URL:** ${{ needs.determine-environment.outputs.environment == 'production' && 'https://devsecops.example.com' || needs.determine-environment.outputs.environment == 'staging' && 'https://staging.devsecops.example.com' || 'https://dev.devsecops.example.com' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}