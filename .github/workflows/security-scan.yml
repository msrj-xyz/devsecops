name: 🛡️ Security Scan

on:
  push:
    branches: [ development, staging, feature/* ]
  pull_request:
    branches: [ master, development, staging ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly scan on Mondays at 2 AM UTC
  workflow_dispatch:

# Prevent concurrent scans
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  # Security tools toggle - enable one by one for testing
  ENABLE_CODEQL: 'false'       # CodeQL SAST (disabled for faster builds)
  ENABLE_TRUFFLEHOG: 'false'   # Secret detection ✅ TESTED & PASSED
  ENABLE_GITLEAKS: 'false'     # Secret detection ✅ WORKING (found expected test secrets)
  ENABLE_SEMGREP: 'false'      # SAST ✅ TESTED & PASSED (fixed config)
  ENABLE_SNYK: 'false'         # SCA (need token)
  ENABLE_OWASP: 'false'        # Dependency check ✅ TESTED & PASSED
  ENABLE_TRIVY: 'false'        # Container security ✅ TESTED & PASSED
  ENABLE_CHECKOV: 'true'       # IaC security ← CURRENTLY TESTING

jobs:
  # ================================================
  # SECURITY SCANNING - INCREMENTAL APPROACH
  # ================================================
  security-scan:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🟨 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        # Create reports directory
        mkdir -p reports
        
        # Install Node.js dependencies
        if [ -f "package.json" ]; then
          npm ci
        fi
        
        # Install Python dependencies
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi

    # ================================================
    # SECRETS DETECTION
    # ================================================
    - name: 🔍 TruffleHog Secret Scan
      if: env.ENABLE_TRUFFLEHOG == 'true'
      continue-on-error: false  # Don't skip errors for proper testing
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified --json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: � Generate TruffleHog Report
      if: env.ENABLE_TRUFFLEHOG == 'true' && (success() || failure())
      run: |
        echo "# �🔍 TruffleHog Secret Detection Report" > reports/trufflehog-report.md
        echo "**Status**: $(if [ $? -eq 0 ]; then echo '✅ PASSED'; else echo '❌ FAILED'; fi)" >> reports/trufflehog-report.md
        echo "**Scan Date**: $(date)" >> reports/trufflehog-report.md
        echo "**Branch**: ${{ github.ref_name }}" >> reports/trufflehog-report.md
        echo "" >> reports/trufflehog-report.md
        echo "Scanning for hardcoded secrets, API keys, and credentials..." >> reports/trufflehog-report.md

    - name: 🔍 GitLeaks Secret Scan  
      if: env.ENABLE_GITLEAKS == 'true'
      continue-on-error: false
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📊 Generate GitLeaks Report
      if: env.ENABLE_GITLEAKS == 'true' && (success() || failure())
      run: |
        echo "# 🔍 GitLeaks Secret Detection Report" > reports/gitleaks-report.md
        echo "**Status**: $(if [ $? -eq 0 ]; then echo '✅ PASSED'; else echo '❌ FAILED'; fi)" >> reports/gitleaks-report.md
        echo "**Scan Date**: $(date)" >> reports/gitleaks-report.md
        echo "**Branch**: ${{ github.ref_name }}" >> reports/gitleaks-report.md

    # ================================================
    # STATIC APPLICATION SECURITY TESTING (SAST)
    # ================================================
    - name: 🔍 Initialize CodeQL
      if: env.ENABLE_CODEQL == 'true'
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript, python, java
        queries: security-extended,security-and-quality

    - name: 🔍 Perform CodeQL Analysis
      if: env.ENABLE_CODEQL == 'true'
      uses: github/codeql-action/analyze@v3

    - name: 🔍 Semgrep Security Scan
      if: env.ENABLE_SEMGREP == 'true'
      continue-on-error: false
      run: |
        # Install semgrep
        pip install semgrep
        
        # Run semgrep without --config to avoid CI conflict
        semgrep --config=auto --json --output=reports/semgrep-results.json .
        
        # Generate readable report
        echo "# 🔍 Semgrep SAST Report" > reports/semgrep-report.md
        echo "**Status**: $(if [ $? -eq 0 ]; then echo '✅ PASSED'; else echo '❌ FAILED'; fi)" >> reports/semgrep-report.md
        echo "**Scan Date**: $(date)" >> reports/semgrep-report.md

    # ================================================
    # SOFTWARE COMPOSITION ANALYSIS (SCA)
    # ================================================
    - name: 🔍 Snyk Security Scan
      if: env.ENABLE_SNYK == 'true'
      continue-on-error: false
      run: |
        if [ -z "${{ secrets.SNYK_TOKEN }}" ]; then
          echo "❌ SNYK_TOKEN not configured"
          echo "# 🔍 Snyk SCA Report" > reports/snyk-report.md
          echo "**Status**: ❌ FAILED - Token not configured" >> reports/snyk-report.md
          exit 1
        else
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --json > reports/snyk-results.json || true
          echo "# 🔍 Snyk SCA Report" > reports/snyk-report.md
          echo "**Status**: ✅ COMPLETED" >> reports/snyk-report.md
        fi

    - name: 🔍 OWASP Dependency Check
      if: env.ENABLE_OWASP == 'true'
      continue-on-error: false
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'devsecops-portfolio'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --out reports/

    - name: 📊 Generate OWASP Report
      if: env.ENABLE_OWASP == 'true' && (success() || failure())
      run: |
        echo "# 🔍 OWASP Dependency Check Report" > reports/owasp-report.md
        echo "**Status**: $(if [ $? -eq 0 ]; then echo '✅ PASSED'; else echo '❌ FAILED'; fi)" >> reports/owasp-report.md
        echo "**Scan Date**: $(date)" >> reports/owasp-report.md

    # ================================================
    # CONTAINER SECURITY
    # ================================================
    - name: 🔍 Trivy Filesystem Scan
      if: env.ENABLE_TRIVY == 'true'
      continue-on-error: false
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'reports/trivy-results.sarif'

    - name: 🔍 Trivy Container Scan
      if: env.ENABLE_TRIVY == 'true'
      continue-on-error: false
      run: |
        # Install trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan Docker images if any exist
        if find . -name "Dockerfile" -type f | head -1; then
          echo "🐳 Found Dockerfiles, performing container security scan..."
          find . -name "Dockerfile" -type f | while read dockerfile; do
            dir=$(dirname "$dockerfile")
            echo "Scanning $dockerfile..."
            trivy fs --format json --output "reports/trivy-$(basename $dir).json" "$dir"
          done
        else
          echo "No Dockerfiles found, skipping container scan"
        fi

    # ================================================
    # INFRASTRUCTURE AS CODE (IaC) SECURITY
    # ================================================
    - name: 🔍 Checkov IaC Security Scan
      if: env.ENABLE_CHECKOV == 'true'
      continue-on-error: false
      run: |
        # Install checkov
        pip install checkov
        
        # Skip terraform scanning as requested
        echo "⏭️ Skipping Terraform scanning as not ready"
        
        # Scan Kubernetes files only
        if find . -name "*.yaml" -o -name "*.yml" | grep -E "(k8s|kubernetes)" | head -1; then
          echo "🔧 Found Kubernetes files, scanning..."
          checkov -f k8s/ --framework kubernetes --output json --output-file reports/checkov-k8s.json || true
          echo "# 🔍 Checkov IaC Security Report" > reports/checkov-report.md
          echo "**Status**: ✅ COMPLETED (Terraform skipped)" >> reports/checkov-report.md
        else
          echo "No Kubernetes files found"
          echo "# 🔍 Checkov IaC Security Report" > reports/checkov-report.md
          echo "**Status**: ⏭️ SKIPPED - No IaC files found" >> reports/checkov-report.md
        fi

    # ================================================
    # GENERATE COMPREHENSIVE SECURITY SUMMARY
    # ================================================
    - name: � Generate Security Summary
      if: success() || failure()
      run: |
        echo "# 🛡️ Security Scan Summary Report" > reports/security-summary.md
        echo "" >> reports/security-summary.md
        echo "**Scan Date**: $(date)" >> reports/security-summary.md
        echo "**Branch**: ${{ github.ref_name }}" >> reports/security-summary.md
        echo "**Commit**: ${{ github.sha }}" >> reports/security-summary.md
        echo "" >> reports/security-summary.md
        
        echo "## 🔧 Enabled Security Tools" >> reports/security-summary.md
        echo "" >> reports/security-summary.md
        echo "| Tool | Status | Purpose |" >> reports/security-summary.md
        echo "|------|--------|---------|" >> reports/security-summary.md
        echo "| TruffleHog | ${{ env.ENABLE_TRUFFLEHOG == 'true' && '✅ Enabled' || '⏸️ Disabled' }} | Secret Detection |" >> reports/security-summary.md
        echo "| GitLeaks | ${{ env.ENABLE_GITLEAKS == 'true' && '✅ Enabled' || '⏸️ Disabled' }} | Secret Detection |" >> reports/security-summary.md
        echo "| CodeQL | ${{ env.ENABLE_CODEQL == 'true' && '✅ Enabled' || '⏸️ Disabled' }} | SAST Analysis |" >> reports/security-summary.md
        echo "| Semgrep | ${{ env.ENABLE_SEMGREP == 'true' && '✅ Enabled' || '⏸️ Disabled' }} | SAST Analysis |" >> reports/security-summary.md
        echo "| Snyk | ${{ env.ENABLE_SNYK == 'true' && '✅ Enabled' || '⏸️ Disabled' }} | SCA Analysis |" >> reports/security-summary.md
        echo "| OWASP | ${{ env.ENABLE_OWASP == 'true' && '✅ Enabled' || '⏸️ Disabled' }} | Dependency Check |" >> reports/security-summary.md
        echo "| Trivy | ${{ env.ENABLE_TRIVY == 'true' && '✅ Enabled' || '⏸️ Disabled' }} | Container Security |" >> reports/security-summary.md
        echo "| Checkov | ${{ env.ENABLE_CHECKOV == 'true' && '✅ Enabled' || '⏸️ Disabled' }} | IaC Security |" >> reports/security-summary.md
        echo "" >> reports/security-summary.md
        
        echo "## 📁 Available Reports" >> reports/security-summary.md
        echo "" >> reports/security-summary.md
        ls -la reports/ >> reports/security-summary.md

    # ================================================
    # UPLOAD SECURITY ARTIFACTS
    # ================================================
    - name: � Upload Security Reports
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_number }}
        path: reports/
        retention-days: 30

    # ================================================
    # SLACK NOTIFICATION WITH DETAILED STATUS  
    # ================================================
    - name: 📢 Notify Slack - Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#security-alerts'
        text: |
          🛡️ **Security Scan Completed Successfully** ✅
          
          � **Scan Details:**
          • Repository: `${{ github.repository }}`
          • Branch: `${{ github.ref_name }}`
          • Commit: `${{ github.sha }}`
          • Triggered by: ${{ github.actor }}
          
          � **Active Security Tools:**
          ${{ env.ENABLE_TRUFFLEHOG == 'true' && '• ✅ TruffleHog (Secret Detection)' || '' }}
          ${{ env.ENABLE_GITLEAKS == 'true' && '• ✅ GitLeaks (Secret Detection)' || '' }}
          ${{ env.ENABLE_SEMGREP == 'true' && '• ✅ Semgrep (SAST)' || '' }}
          ${{ env.ENABLE_SNYK == 'true' && '• ✅ Snyk (SCA)' || '' }}
          ${{ env.ENABLE_OWASP == 'true' && '• ✅ OWASP (Dependencies)' || '' }}
          ${{ env.ENABLE_TRIVY == 'true' && '• ✅ Trivy (Containers)' || '' }}
          ${{ env.ENABLE_CHECKOV == 'true' && '• ✅ Checkov (IaC)' || '' }}
          
          📁 **Reports Available**: Download from Actions artifacts
          🔗 **View Details**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: 📢 Notify Slack - Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          🚨 **Security Scan Failed** ❌
          
          📊 **Scan Details:**
          • Repository: `${{ github.repository }}`
          • Branch: `${{ github.ref_name }}`
          • Commit: `${{ github.sha }}`
          • Triggered by: ${{ github.actor }}
          
          ⚠️ **Issue:** One or more security tools encountered errors
          
          � **Active Security Tools:**
          ${{ env.ENABLE_TRUFFLEHOG == 'true' && '• ❓ TruffleHog (Secret Detection)' || '' }}
          ${{ env.ENABLE_GITLEAKS == 'true' && '• ❓ GitLeaks (Secret Detection)' || '' }}
          ${{ env.ENABLE_SEMGREP == 'true' && '• ❓ Semgrep (SAST)' || '' }}
          ${{ env.ENABLE_SNYK == 'true' && '• ❓ Snyk (SCA)' || '' }}
          ${{ env.ENABLE_OWASP == 'true' && '• ❓ OWASP (Dependencies)' || '' }}
          ${{ env.ENABLE_TRIVY == 'true' && '• ❓ Trivy (Containers)' || '' }}
          ${{ env.ENABLE_CHECKOV == 'true' && '• ❓ Checkov (IaC)' || '' }}
          
          🔧 **Action Required**: Check logs and fix configuration
          🔗 **View Logs**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}