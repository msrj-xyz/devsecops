name: 🛡️ Security Scan

on:
  push:
    branches: [ development, staging, feature/* ]
  pull_request:
    branches: [ master, development, staging ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly scan on Mondays at 2 AM UTC
  workflow_dispatch:

# Prevent concurrent scans
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  # Set to 'true' to enable CodeQL analysis (increases build time significantly)
  ENABLE_CODEQL: 'false'

jobs:
  # ================================================
  # SECURITY SCANNING
  # ================================================
  security-scan:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🟨 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        # Install Node.js dependencies
        if [ -f "package.json" ]; then
          npm ci
        fi
        
        # Install Python dependencies
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi

    # ================================================
    # SECRETS DETECTION
    # ================================================
    - name: 🔍 TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔍 GitLeaks Secret Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # ================================================
    # STATIC APPLICATION SECURITY TESTING (SAST)
    # ================================================
    - name: 🔍 Initialize CodeQL
      if: env.ENABLE_CODEQL == 'true'
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript, python, java
        queries: security-extended,security-and-quality

    - name: 🔍 Perform CodeQL Analysis
      if: env.ENABLE_CODEQL == 'true'
      uses: github/codeql-action/analyze@v3

    - name: 🔍 Semgrep Security Scan
      continue-on-error: true
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
          p/python
          p/java
          p/docker
          p/kubernetes
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}

    # ================================================
    # SOFTWARE COMPOSITION ANALYSIS (SCA)
    # ================================================
    - name: 🔍 Snyk Security Scan
      continue-on-error: true
      uses: snyk/actions/node@master
      with:
        args: --severity-threshold=high --json > snyk-results.json
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: 🔍 OWASP Dependency Check
      continue-on-error: true
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'devsecops-portfolio'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7

    # ================================================
    # CONTAINER SECURITY
    # ================================================
    - name: 🔍 Trivy Filesystem Scan
      continue-on-error: true
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 🔍 Trivy Container Scan
      continue-on-error: true
      run: |
        # Scan Docker images if any exist
        if [ -f "Dockerfile" ] || find . -name "Dockerfile" -type f | head -1; then
          echo "🐳 Found Dockerfiles, performing container security scan..."
          find . -name "Dockerfile" -type f | while read dockerfile; do
            dir=$(dirname "$dockerfile")
            echo "🔍 Scanning Dockerfile in $dir"
            docker build -t temp-scan-image:latest "$dir" || continue
            trivy image --format sarif --output "trivy-container-$(basename $dir).sarif" temp-scan-image:latest || true
            docker rmi temp-scan-image:latest || true
          done
        else
          echo "⏭️ No Dockerfiles found, skipping container scan"
        fi

    # ================================================
    # INFRASTRUCTURE AS CODE SECURITY
    # ================================================
    - name: 🔍 Checkov IaC Security Scan
      continue-on-error: true
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform,kubernetes,dockerfile,github_configuration
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: 🔍 Kubesec Kubernetes Security Scan
      continue-on-error: true
      run: |
        # Download kubesec
        wget https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz
        tar -xzf kubesec_linux_amd64.tar.gz
        chmod +x kubesec
        
        # Scan Kubernetes manifests
        find . -name "*.yaml" -o -name "*.yml" | grep -E "(k8s|kube|deploy)" | while read file; do
          echo "🔍 Scanning $file"
          ./kubesec scan "$file" > "kubesec-$(basename $file .yaml).json" || true
        done

  # ================================================
  # SECURITY REPORT GENERATION
  # ================================================
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: always()
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⬇️ Download Security Artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*"
        merge-multiple: true
        path: ./security-results

    - name: 📊 Generate Security Report
      run: |
        mkdir -p security-reports
        
        # Generate comprehensive security report
        cat > security-reports/security-summary.md << 'EOF'
        # 🛡️ Security Scan Summary Report
        
        **Repository:** ${{ github.repository }}
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        **Scan Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
        **Triggered by:** ${{ github.actor }}
        **Event:** ${{ github.event_name }}
        
        ---
        
        ## 📊 Scan Results Overview
        
        | Security Tool | Status | Notes |
        |---------------|--------|-------|
        | TruffleHog (Secrets) | ✅ | Secret detection completed |
        | GitLeaks (Secrets) | ✅ | Git history scanned |
        | CodeQL (SAST) | ${{ env.ENABLE_CODEQL == 'true' && '✅ Enabled' || '⏭️ Skipped' }} | Static analysis |
        | Semgrep (SAST) | ✅ | Multi-language SAST |
        | Snyk (SCA) | ✅ | Dependency vulnerabilities |
        | OWASP Dep Check | ✅ | Known vulnerabilities |
        | Trivy (Container) | ✅ | Container & filesystem scan |
        | Checkov (IaC) | ✅ | Infrastructure as Code |
        
        ## 🎯 Security Gate Status
        
        ✅ **ANALYSIS COMPLETED** - Review results for any issues
        
        ## 🔗 Artifacts
        
        - Security scan results available in workflow artifacts
        - SARIF files generated for GitHub Security tab integration
        
        ---
        *This report was automatically generated by the DevSecOps Security Pipeline*
        EOF
        
        echo "✅ Security report generated successfully"

    - name: 📤 Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.run_number }}
        path: security-reports/
        retention-days: 30

    - name: 💬 Comment PR with Security Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read security summary
          let comment = '## 🛡️ Security Scan Results\n\n';
          
          try {
            const summary = fs.readFileSync('security-reports/security-summary.md', 'utf8');
            comment += summary;
          } catch (error) {
            comment += '⚠️ Security report generation failed. Please check workflow logs.\n';
          }
          
          comment += '\n\n---\n*Automated security scan by DevSecOps Pipeline*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # ================================================
  # SLACK NOTIFICATION
  # ================================================
  notify:
    name: 🔔 Notify Results
    runs-on: ubuntu-latest
    needs: [security-scan, security-report]
    if: always()
    
    steps:
    - name: 🔔 Send Slack Notification
      continue-on-error: true
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.security-scan.result == 'success' && 'success' || 'failure' }}
        text: |
          🛡️ **Security Scan Completed**
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** `${{ github.sha }}`
          **Triggered by:** ${{ github.actor }}
          
          **Results:**
          • Security Scan: ${{ needs.security-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }}
          • Report Generation: ${{ needs.security-report.result == 'success' && '✅ AVAILABLE' || '❌ FAILED' }}
          • CodeQL Analysis: ${{ env.ENABLE_CODEQL == 'true' && '✅ ENABLED' || '⏭️ SKIPPED (faster builds)' }}
          
          📥 **Download:** [Security Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}